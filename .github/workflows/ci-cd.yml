name: Release

on:
  push:
    branches:
      - main

env:
  GO_VERSION: "1.24.5"
  DOCKER_IMAGE_NAME: gothere

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate version tag
        id: version
        run: |
          # Create a version tag using current timestamp
          VERSION="v$(date +'%Y.%m.%d-%H%M%S')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Configure git with GitHub Actions bot credentials
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push the tag
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION

          echo "Created and pushed tag: $VERSION"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          # Use the latest version of GoReleaser
          version: latest
          # Run the release command
          args: release --clean
        env:
          # GitHub token for creating releases and uploading assets
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # Optional: Add custom environment variables for GoReleaser
          # These can be used in your .goreleaser.yml file
          PROJECT_NAME: GoThere
          BUILD_USER: github-actions
          BUILD_DATE: ${{ steps.version.outputs.version }}

  # New job for Docker Hub deployment
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release # This job runs after the release job completes successfully

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate version tag (for Docker)
        id: docker_version
        run: |
          # Use the same versioning logic as the release job
          VERSION="v$(date +'%Y.%m.%d-%H%M%S')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Docker version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Enable advanced Docker features like multi-platform builds
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            # Tag with version (e.g., v2024.08.06-143022)
            type=raw,value=${{ steps.docker_version.outputs.version }}
            # Tag as latest for the most recent build
            type=raw,value=latest
            # Tag with branch name (main)
            type=ref,event=branch
            # Tag with short commit SHA
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          # Enable build cache for faster subsequent builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build arguments (optional)
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            BUILD_DATE=${{ steps.docker_version.outputs.version }}

      - name: Docker image summary
        run: |
          echo "üê≥ Docker image built and pushed successfully!"
          echo "üì¶ Image tags:"
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
          echo ""
          echo "üîó Docker Hub URL: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"

  # Enhanced notification job that includes Docker status
  notify:
    name: Notify Release Status
    runs-on: ubuntu-latest
    needs: [release, docker]
    if: always() # Run even if previous jobs fail

    steps:
      - name: Notify Success
        if: needs.release.result == 'success' && needs.docker.result == 'success'
        run: |
          echo "‚úÖ Release and Docker deployment completed successfully!"
          echo "üì¶ New GitHub release created with GoReleaser"
          echo "üê≥ Docker image pushed to Docker Hub"
          echo ""
          echo "üöÄ Deployment Summary:"
          echo "  - GitHub Release: ‚úÖ Success"
          echo "  - Docker Hub: ‚úÖ Success"

      - name: Notify Partial Success
        if: needs.release.result == 'success' && needs.docker.result != 'success'
        run: |
          echo "‚ö†Ô∏è  Release succeeded but Docker deployment failed!"
          echo "üì¶ GitHub release created successfully"
          echo "üê≥ Docker push failed - check Docker job logs"

      - name: Notify Failure
        if: needs.release.result == 'failure'
        run: |
          echo "‚ùå Release failed!"
          echo "Check the release job logs for details"
          exit 1

# Concurrency control - prevents multiple releases running simultaneously
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true
