name: Release

on:
  push:
    branches:
      - main

env:
  GO_VERSION: "1.24.5" # Specify your Go version

permissions:
  contents: write # Required to create releases and upload assets
  packages: write # Required if publishing to GitHub Packages
  tokens: write # Required for GoReleaser to access GitHub API

# Define the jobs that will run
jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate version tag
        id: version
        run: |
          # Create a version tag using current timestamp
          VERSION="v$(date +'%Y.%m.%d-%H%M%S')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.version }}

          # Configure git with GitHub Actions bot credentials
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create and push the tag
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION

          echo "Created and pushed tag: $VERSION"

      # Step 5: Run GoReleaser to build and create release
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          # Use the latest version of GoReleaser
          version: latest
          # Run the release command
          args: release --clean
        env:
          # GitHub token for creating releases and uploading assets
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # Optional: Add custom environment variables for GoReleaser
          # These can be used in your .goreleaser.yml file
          PROJECT_NAME: GoThere
          BUILD_USER: github-actions
          BUILD_DATE: ${{ steps.version.outputs.version }}

  # Job 3: Notify on success/failure (optional)
  notify:
    name: Notify Release Status
    runs-on: ubuntu-latest
    needs: release
    if: always() # Run even if previous jobs fail

    steps:
      - name: Notify Success
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release completed successfully!"
          echo "New release created with GoReleaser"

      - name: Notify Failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          echo "Check the logs for details"
          exit 1
